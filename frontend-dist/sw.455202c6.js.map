{"mappings":"MAEA,MACMA,EAAI,OACJC,EAAS,CACXC,IAA2BF,EAC3BG,KAA6BH,EAC7BI,KAA6BJ,GAEjC,IAAIK,EAAa,iBAEjBC,KAAKC,iBAAiB,WAAYC,IAC9BP,EAAOC,IAAI,gCAEXM,EAAMC,UACFC,OAAOC,KAAKN,GAAYO,MAAMC,IAC1BZ,EAAOC,IAAI,uBAKvB,MAAMY,EAAY,CAAC,kBAAmB,oBAAqB,uBAAwB,mBAAoB,uBAAwB,aAO/HR,KAAKC,iBAAiB,SAAUC,cALXO,GACjB,MAAMC,EAAM,IAAIC,IAAIF,EAAQC,KAC5B,MAA0B,QAAnBD,EAAQG,QAAoBJ,EAAUK,SAASH,EAAII,QAAUJ,EAAIK,WAAWF,SAAS,WAOvFG,CAAYd,EAAMO,SACnBd,EAAOC,IAAI,kBAGfM,EAAMe,YACFb,OAAOC,KAAKN,GAAYO,MAAMC,GAC1BA,EAAMW,MAAMhB,EAAMO,SAASH,MAAMa,GACb,MAAZA,GACAxB,EAAOG,KAAK,YAAaI,EAAMO,SACxBU,IAEPxB,EAAOE,KAAK,aAAcK,EAAMO,QAAQC,KAEjCU,MAAMlB,EAAMO,SAASH,MAAK,SAAUa,GAEvC,GAAKA,GAAgC,MAApBA,EAASE,OAEnB,CACH1B,EAAOE,KAAK,WAMZ,IAAIyB,EAAkBH,EAASI,QAG/B,OAFAhB,EAAMiB,IAAItB,EAAMO,QAASa,GAElBH,EAXP,OAAOA","sources":["sw.js"],"sourcesContent":["// mostly based on https://developers.google.com/web/fundamentals/primers/service-workers\n\nconst DEBUG = false\nconst noop = () => {}\nconst logger = {\n    log: DEBUG ? console.log : noop,\n    warn: DEBUG ? console.warn : noop,\n    info: DEBUG ? console.info : noop,\n}\nvar CACHE_NAME = \"pluto-cache-v2\"\n\nself.addEventListener(\"install\", (event) => {\n    logger.log(\"Hello from service worker ðŸ‘‹\")\n    // Perform install steps\n    event.waitUntil(\n        caches.open(CACHE_NAME).then((cache) => {\n            logger.log(\"Opened cache\")\n        })\n    )\n})\n\nconst allowList = [\"www.gstatic.com\", \"fonts.gstatic.com\", \"fonts.googleapis.com\", \"cdn.jsdelivr.net\", \"cdnjs.cloudflare.com\", \"unpkg.com\"]\n\nfunction shouldCache(request) {\n    const url = new URL(request.url)\n    return request.method === \"GET\" && allowList.includes(url.host) && !url.toString().includes(\"skip_sw\")\n}\n\nself.addEventListener(\"fetch\", (event) => {\n    // if (navigator.userAgent.includes(\"Firefox\")) {\n    //     return\n    // }\n    if (!shouldCache(event.request)) {\n        logger.log(\"skipping cache\")\n        return\n    }\n    event.respondWith(\n        caches.open(CACHE_NAME).then((cache) =>\n            cache.match(event.request).then((response) => {\n                if (response != null) {\n                    logger.info(\"CACHE HIT\", event.request)\n                    return response\n                } else {\n                    logger.warn(\"Cache miss\", event.request.url)\n\n                    return fetch(event.request).then(function (response) {\n                        // Check if we received a valid response\n                        if (!response || response.status !== 200) {\n                            return response\n                        } else {\n                            logger.warn(\"FETCHED\")\n\n                            // Clone the response. A response is a stream\n                            // and because we want the browser to consume the response\n                            // as well as the cache consuming the response, we need\n                            // to clone it so we have two streams.\n                            var responseToCache = response.clone()\n                            cache.put(event.request, responseToCache)\n\n                            return response\n                        }\n                    })\n                }\n            })\n        )\n    )\n})\n"],"names":["$4e9dd788914e3a0c$var$noop","$4e9dd788914e3a0c$var$logger","log","warn","info","$4e9dd788914e3a0c$var$CACHE_NAME","self","addEventListener","event","waitUntil","caches","open","then","cache","$4e9dd788914e3a0c$var$allowList","request","url","URL","method","includes","host","toString","$4e9dd788914e3a0c$var$shouldCache","respondWith","match","response","fetch","status","responseToCache","clone","put"],"version":3,"file":"sw.455202c6.js.map"}