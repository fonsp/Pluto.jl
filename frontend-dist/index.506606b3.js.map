{"mappings":"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","sources":["components/PasteHandler.js","components/Welcome.js","index.js"],"sourcesContent":["import { html, useEffect } from \"../imports/Preact.js\"\nimport { link_edit } from \"./Welcome.js\"\n\nconst detectNotebook = (inputtext) => {\n    // Add a newline in the end for the case user didn't copy it\n    // That helps if the user copied up to the last line of the cell order\n    const text = `${inputtext}\\n`.replace(\"\\r\\n\", \"\\n\")\n    const from = text.indexOf(\"### A Pluto.jl notebook ###\")\n    const cellsfound = text.match(/# ... ........-....-....-....-............/g)\n    const cellscount = cellsfound?.length\n    const cellsorder = text.indexOf(\"# ╔═╡ Cell order:\") + \"# ╔═╡ Cell order:\".length + 1\n    let to = cellsorder\n    for (let i = 1; i <= cellscount; i++) {\n        to = text.indexOf(\"\\n\", to + 1) + 1\n    }\n    return text.slice(from, to)\n}\n\nconst readMovedText = (movedDataTransferItem) =>\n    new Promise((resolve, reject) => {\n        try {\n            movedDataTransferItem.getAsString((text) => {\n                console.log(text)\n                resolve(text)\n            })\n        } catch (ex) {\n            reject(ex)\n        }\n    })\n\nconst readFile = (file) =>\n    new Promise((resolve, reject) => {\n        const { name, type } = file\n        const fr = new FileReader()\n        fr.onerror = () => reject(\"Failed to read file!\")\n        fr.onloadstart = () => {}\n        fr.onprogress = ({ loaded, total }) => {}\n        fr.onload = () => {}\n        fr.onloadend = ({ target: { result } }) => resolve({ file: result, name, type })\n        fr.readAsText(file)\n    })\n\nconst processFile = async (ev) => {\n    let notebook\n    console.log(ev)\n    // Don't do anything if paste on CodeMirror\n    if ((ev?.path ?? ev?.composedPath()).filter((node) => node?.classList?.contains(\".cm-editor\"))?.length > 0) {\n        return\n    }\n    switch (ev.type) {\n        case \"paste\":\n            notebook = detectNotebook(ev.clipboardData.getData(\"text/plain\"))\n            break\n        case \"dragstart\": {\n            ev.dataTransfer.dropEffect = \"move\"\n            return\n        }\n        case \"dragover\": {\n            ev.preventDefault()\n            return\n        }\n        case \"drop\": {\n            ev.preventDefault()\n            notebook = ev.dataTransfer.types.includes(\"Files\")\n                ? await readFile(ev.dataTransfer.files[0]).then(({ file }) => file)\n                : detectNotebook(await readMovedText(ev.dataTransfer.items[0]))\n            break\n        }\n    }\n    if (!notebook) {\n        // Notebook not found! Doing nothing :)\n        return\n    }\n    document.body.classList.add(\"loading\")\n    const reply = await fetch(\"./notebookupload\", {\n        method: \"POST\",\n        body: notebook,\n    }).then((res) => res.text())\n    window.location.href = link_edit(reply)\n}\n\nexport const PasteHandler = () => {\n    useEffect(() => {\n        document.addEventListener(\"paste\", processFile)\n        document.addEventListener(\"drop\", processFile)\n        document.addEventListener(\"dragstart\", processFile)\n        document.addEventListener(\"dragover\", processFile)\n        return () => {\n            document.removeEventListener(\"paste\", processFile)\n            document.removeEventListener(\"drop\", processFile)\n            document.removeEventListener(\"dragstart\", processFile)\n            document.removeEventListener(\"dragover\", processFile)\n        }\n    })\n\n    return html`<span />`\n}\n","import _ from \"../imports/lodash.js\"\nimport { html, Component } from \"../imports/Preact.js\"\n\nimport { FilePicker } from \"./FilePicker.js\"\nimport { create_pluto_connection, fetch_pluto_releases } from \"../common/PlutoConnection.js\"\nimport { cl } from \"../common/ClassTable.js\"\nimport { PasteHandler } from \"./PasteHandler.js\"\n\nconst get_path = (p) => (typeof p === \"object\" ? p.path : p) ?? \"\"\nconst get_url = (p) => (typeof p === \"object\" ? p.url : p) ?? \"\"\n\nconst create_empty_notebook = (path, notebook_id = null) => {\n    return {\n        transitioning: false, // between running and being shut down\n        notebook_id: notebook_id, // null means that it is not running\n        path: path,\n    }\n}\n\nconst split_at_level = (path = \"\", level = 1) => {\n    return get_path(path).split(/\\/|\\\\/)?.slice(-level)?.join(\"/\")\n}\n\nconst shortest_path = (maybepath, allpaths) => {\n    const path = get_path(maybepath)\n    const paths = allpaths.map(get_path)\n    let level = 1\n    for (const otherpath of paths) {\n        if (otherpath !== path) {\n            while (split_at_level(String(path), level) === split_at_level(String(otherpath), level)) {\n                level++\n            }\n        }\n    }\n    return split_at_level(path, level)\n}\n\n// should strip characters similar to how github converts filenames into the #file-... URL hash.\n// test on: https://gist.github.com/fonsp/f7d230da4f067a11ad18de15bff80470\nconst gist_normalizer = (str) =>\n    str\n        .toLowerCase()\n        .normalize(\"NFD\")\n        .replace(/[^a-z1-9]/g, \"\")\n\nexport const process_path_or_url = async (path_or_url) => {\n    try {\n        const u = new URL(path_or_url)\n        if (![\"http:\", \"https:\", \"ftp:\", \"ftps:\"].includes(u.protocol)) {\n            throw \"Not a web URL\"\n        }\n        if (u.host === \"gist.github.com\") {\n            console.log(\"Gist URL detected\")\n            const parts = u.pathname.substring(1).split(\"/\")\n            const gist_id = parts[1]\n            const gist = await (\n                await fetch(`https://api.github.com/gists/${gist_id}`, {\n                    headers: { Accept: \"application/vnd.github.v3+json\" },\n                })\n            ).json()\n            console.log(gist)\n            const files = Object.values(gist.files)\n\n            const selected = files.find((f) => gist_normalizer(\"#file-\" + f.filename) === gist_normalizer(u.hash))\n            if (selected != null) {\n                return {\n                    type: \"url\",\n                    path_or_url: selected.raw_url,\n                }\n            }\n\n            return {\n                type: \"url\",\n                path_or_url: files[0].raw_url,\n            }\n        } else if (u.host === \"github.com\") {\n            u.searchParams.set(\"raw\", \"true\")\n        }\n        return {\n            type: \"url\",\n            path_or_url: u.href,\n        }\n    } catch (ex) {\n        /* Remove eventual single/double quotes from the path if they surround it, see\n          https://github.com/fonsp/Pluto.jl/issues/1639 */\n        if (path_or_url[path_or_url.length - 1] === '\"' && path_or_url[0] === '\"') {\n            path_or_url = path_or_url.slice(1, -1) /* Remove first and last character */\n        }\n        return {\n            type: \"path\",\n            path_or_url: path_or_url,\n        }\n    }\n}\n\n// /open will execute a script from your hard drive, so we include a token in the URL to prevent a mean person from getting a bad file on your computer _using another hypothetical intrusion_, and executing it using Pluto\nexport const link_open_path = (path) => \"open?\" + new URLSearchParams({ path: get_path(path) }).toString()\nexport const link_open_url = (url) => \"open?\" + new URLSearchParams({ url: get_url(url) }).toString()\nexport const link_edit = (notebook_id) => \"edit?id=\" + notebook_id\n\nexport class Welcome extends Component {\n    constructor() {\n        super()\n\n        this.state = {\n            // running_notebooks: null,\n            // recent_notebooks: null,\n            combined_notebooks: null, // will become an array\n            connected: false,\n        }\n        const set_notebook_state = (this.set_notebook_state = (path, new_state_props) => {\n            this.setState((prevstate) => {\n                return {\n                    combined_notebooks: prevstate.combined_notebooks.map((nb) => {\n                        return nb.path == path ? { ...nb, ...new_state_props } : nb\n                    }),\n                }\n            })\n        })\n\n        const on_update = ({ message, type }) => {\n            if (type === \"notebook_list\") {\n                // a notebook list updates happened while the welcome screen is open, because a notebook started running for example\n                // the list has already been generated and rendered to the page. We try to maintain order as much as possible, to prevent the list order \"jumping around\" while you are interacting with it.\n                // You can always get a neatly sorted list by refreshing the page.\n\n                const new_running = message.notebooks\n\n                // already rendered notebooks will be added to this list:\n                const rendered_and_running = []\n\n                const new_combined_notebooks = this.state.combined_notebooks.map((nb) => {\n                    // try to find a matching notebook in the remote list\n                    let running_version = null\n\n                    if (nb.notebook_id) {\n                        // match notebook_ids to handle a path change\n                        running_version = new_running.find((rnb) => rnb.notebook_id == nb.notebook_id)\n                    } else {\n                        // match paths to handle a notebook bootup\n                        running_version = new_running.find((rnb) => rnb.path == nb.path)\n                    }\n\n                    if (running_version == null) {\n                        return create_empty_notebook(nb.path)\n                    } else {\n                        const new_notebook = create_empty_notebook(running_version.path, running_version.notebook_id)\n                        rendered_and_running.push(running_version)\n                        return new_notebook\n                    }\n                })\n\n                const not_rendered_but_running = new_running.filter((rnb) => !rendered_and_running.includes(rnb))\n                this.setState({\n                    combined_notebooks: [...not_rendered_but_running, ...new_combined_notebooks],\n                })\n            }\n        }\n\n        const on_connection_status = (val) => this.setState({ connected: val })\n\n        this.client = {}\n        this.client_promise = create_pluto_connection({\n            on_unrequested_update: on_update,\n            on_connection_status: on_connection_status,\n            on_reconnect: () => true,\n        })\n        this.client_promise.then((client) => {\n            Object.assign(this.client, client)\n\n            this.client.send(\"get_all_notebooks\", {}, {}).then(({ message }) => {\n                const running = message.notebooks.map((nb) => create_empty_notebook(nb.path, nb.notebook_id))\n\n                const recent_notebooks = get_stored_recent_notebooks()\n\n                // show running notebooks first, in the order defined by the recent notebooks, then recent notebooks\n                const combined_notebooks = [\n                    ..._.sortBy(running, [(nb) => _.findIndex([...recent_notebooks, ...running], (r) => r.path === nb.path)]),\n                    ..._.differenceBy(recent_notebooks, running, (nb) => nb.path),\n                ]\n\n                this.setState({ combined_notebooks: combined_notebooks })\n\n                document.body.classList.remove(\"loading\")\n            })\n\n            fetch_pluto_releases()\n                .then((releases) => {\n                    const local = this.client.version_info.pluto\n                    const latest = releases[releases.length - 1].tag_name\n                    console.log(`Pluto version ${local}`)\n                    const local_index = releases.findIndex((r) => r.tag_name === local)\n                    if (local_index !== -1) {\n                        const updates = releases.slice(local_index + 1)\n                        const recommended_updates = updates.filter((r) => r.body.toLowerCase().includes(\"recommended update\"))\n                        if (recommended_updates.length > 0) {\n                            console.log(`Newer version ${latest} is available`)\n                            if (!this.client.version_info.dismiss_update_notification) {\n                                alert(\n                                    \"A new version of Pluto.jl is available! 🎉\\n\\n    You have \" +\n                                        local +\n                                        \", the latest is \" +\n                                        latest +\n                                        '.\\n\\nYou can update Pluto.jl using the julia package manager:\\n    import Pkg; Pkg.update(\"Pluto\")\\nAfterwards, exit Pluto.jl and restart julia.'\n                                )\n                            }\n                        }\n                    }\n                })\n                .catch(() => {\n                    // Having this as a uncaught promise broke the frontend tests for me\n                    // so I'm just swallowing the error explicitly - DRAL\n                })\n\n            // to start JIT'ting\n            this.client.send(\n                \"completepath\",\n                {\n                    query: \"nothinginparticular\",\n                },\n                {}\n            )\n        })\n\n        this.on_open_path = async (new_path) => {\n            const processed = await process_path_or_url(new_path)\n            if (processed.type === \"path\") {\n                document.body.classList.add(\"loading\")\n                window.location.href = link_open_path(processed.path_or_url)\n            } else {\n                if (confirm(\"Are you sure? This will download and run the file at\\n\\n\" + processed.path_or_url)) {\n                    document.body.classList.add(\"loading\")\n                    window.location.href = link_open_url(processed.path_or_url)\n                }\n            }\n        }\n\n        this.on_session_click = (nb) => {\n            if (nb.transitioning) {\n                return\n            }\n            const running = nb.notebook_id != null\n            if (running) {\n                if (confirm(\"Shut down notebook process?\")) {\n                    set_notebook_state(nb.path, {\n                        running: false,\n                        transitioning: true,\n                    })\n                    this.client.send(\n                        \"shutdown_notebook\",\n                        {\n                            keep_in_session: false,\n                        },\n                        {\n                            notebook_id: nb.notebook_id,\n                        },\n                        false\n                    )\n                }\n            } else {\n                set_notebook_state(nb.path, {\n                    transitioning: true,\n                })\n                fetch(link_open_path(nb.path), {\n                    method: \"GET\",\n                })\n                    .then((r) => {\n                        if (!r.redirected) {\n                            throw new Error(\"file not found maybe? try opening the notebook directly\")\n                        }\n                    })\n                    .catch((e) => {\n                        console.error(\"Failed to start notebook in background\")\n                        console.error(e)\n                        set_notebook_state(nb.path, {\n                            transitioning: false,\n                            notebook_id: null,\n                        })\n                    })\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.componentDidUpdate()\n    }\n\n    componentDidUpdate() {\n        document.body.classList.toggle(\"nosessions\", !(this.state.combined_notebooks == null || this.state.combined_notebooks.length > 0))\n    }\n\n    render() {\n        let recents = null\n        if (this.state.combined_notebooks == null) {\n            recents = html`<li><em>Loading...</em></li>`\n        } else {\n            const all_paths = this.state.combined_notebooks.map((nb) => nb.path)\n            recents = this.state.combined_notebooks.map((nb) => {\n                const running = nb.notebook_id != null\n                return html`<li\n                    key=${nb.path}\n                    class=${cl({\n                        running: running,\n                        recent: !running,\n                        transitioning: nb.transitioning,\n                    })}\n                >\n                    <button onclick=${() => this.on_session_click(nb)} title=${running ? \"Shut down notebook\" : \"Start notebook in background\"}>\n                        <span></span>\n                    </button>\n                    <a\n                        href=${running ? link_edit(nb.notebook_id) : link_open_path(nb.path)}\n                        title=${get_path(nb.path)}\n                        onClick=${(e) => {\n                            document.body.classList.add(\"loading\")\n                            this.set_notebook_state(nb.path, {\n                                transitioning: true,\n                            })\n                        }}\n                        >${shortest_path(nb.path, all_paths)}</a\n                    >\n                </li>`\n            })\n        }\n\n        return html`<p>New session:</p>\n            <${PasteHandler} />\n            <ul id=\"new\">\n                <li>Open a <a href=\"sample\">sample notebook</a></li>\n                <li>Create a <a href=\"new\">new notebook</a></li>\n                <li>\n                    Open from file:\n                    <${FilePicker} client=${this.client} value=\"\" on_submit=${this.on_open_path} button_label=\"Open\" placeholder=\"Enter path or URL...\" />\n                </li>\n            </ul>\n            <br />\n            <p>Recent sessions:</p>\n            <ul id=\"recent\">\n                ${recents}\n            </ul>`\n    }\n}\n\nconst get_stored_recent_notebooks = () => {\n    const storedString = localStorage.getItem(\"recent notebooks\")\n    const storedList = storedString != null ? JSON.parse(storedString) : []\n    return storedList.map((path) => create_empty_notebook(path))\n}\n","import { html, render } from \"./imports/Preact.js\"\nimport \"./common/NodejsCompatibilityPolyfill.js\"\n\nimport { Welcome } from \"./components/Welcome.js\"\n\nrender(html`<${Welcome} />`, document.querySelector(\"main\"))\n"],"names":["$5ba7540149de0ef5$var$detectNotebook","inputtext","text","replace","from","indexOf","cellscount","match","length","to","i","slice","$5ba7540149de0ef5$var$processFile","async","ev","notebook","console","log","path","composedPath","filter","node","classList","contains","type","clipboardData","getData","dataTransfer","dropEffect","preventDefault","types","includes","file","files","Promise","resolve","reject","name","fr","FileReader","onerror","onloadstart","onprogress","loaded","total","onload","onloadend","target","result","readAsText","then","movedDataTransferItem","items","getAsString","ex","document","body","add","reply","fetch","method","res","window","location","href","$4a972c5ef7671a4a$export$728ed0cc4bf19739","$5ba7540149de0ef5$export$d21599b661fecf1d","$5gA8Y","useEffect","addEventListener","removeEventListener","html","$4a972c5ef7671a4a$var$get_path","p","$4a972c5ef7671a4a$var$create_empty_notebook","notebook_id","transitioning","$4a972c5ef7671a4a$var$split_at_level","level","split","join","$4a972c5ef7671a4a$var$gist_normalizer","str","toLowerCase","normalize","$4a972c5ef7671a4a$export$abea47f490b427e9","URLSearchParams","toString","$4a972c5ef7671a4a$export$23191e4434a9e834","Component","super","this","state","combined_notebooks","connected","set_notebook_state","new_state_props","setState","prevstate","map","nb","client","client_promise","$aeQ5K","create_pluto_connection","on_unrequested_update","message","new_running","notebooks","rendered_and_running","new_combined_notebooks","running_version","find","rnb","new_notebook","push","not_rendered_but_running","on_connection_status","val","on_reconnect","Object","assign","send","running","recent_notebooks","$4a972c5ef7671a4a$var$get_stored_recent_notebooks","$4bQeR","default","sortBy","findIndex","r","differenceBy","remove","fetch_pluto_releases","releases","local","version_info","pluto","latest","tag_name","local_index","dismiss_update_notification","alert","catch","query","on_open_path","new_path","processed","path_or_url","u","URL","protocol","host","gist_id","pathname","substring","gist","headers","Accept","json","values","selected","f","filename","hash","raw_url","searchParams","set","$4a972c5ef7671a4a$export$b8e705314daa269f","url","confirm","on_session_click","keep_in_session","redirected","Error","e","error","componentDidMount","componentDidUpdate","toggle","render","recents","all_paths","$jhApd","cl","recent","maybepath","allpaths","paths","otherpath","String","$4a972c5ef7671a4a$var$shortest_path","querySelector"],"version":3,"file":"index.506606b3.js.map"}