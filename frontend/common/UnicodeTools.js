const te = new TextEncoder()
const td = new TextDecoder()

export const length_utf8 = (str, startindex_utf16 = 0, endindex_utf16 = undefined) => te.encode(str.substring(startindex_utf16, endindex_utf16)).length

export const utf8index_to_ut16index = (str, index_utf8) => td.decode(te.encode(str).slice(0, index_utf8)).length

export const splice_utf8 = (original, startindex_utf8, endindex_utf8, replacement) => {
    // JS uses UTF-16 for internal representation of strings, e.g.
    // "e".length == 1, "√©".length == 1, "üê∂".length == 2

    // Julia uses UTF-8, e.g.
    // ncodeunits("e") == 1, ncodeunits("√©") == 2, ncodeunits("üê∂") == 4
    //     length("e") == 1,     length("√©") == 1,     length("üê∂") == 1

    // Completion results from julia will give the 'splice indices': "where should the completed keyword be inserted?"
    // we need to splice into javascript string, so we convert to a UTF-8 byte array, then splice, then back to the string.

    const original_enc = te.encode(original)
    const replacement_enc = te.encode(replacement)

    const result_enc = new Uint8Array(original_enc.length + replacement_enc.length - (endindex_utf8 - startindex_utf8))

    result_enc.set(original_enc.slice(0, startindex_utf8), 0)
    result_enc.set(replacement_enc, startindex_utf8)
    result_enc.set(original_enc.slice(endindex_utf8), startindex_utf8 + replacement_enc.length)

    return td.decode(result_enc)
}

export const slice_utf8 = (original, startindex_utf8, endindex_utf8) => {
    // JS uses UTF-16 for internal representation of strings, e.g.
    // "e".length == 1, "√©".length == 1, "üê∂".length == 2

    // Julia uses UTF-8, e.g.
    // ncodeunits("e") == 1, ncodeunits("√©") == 2, ncodeunits("üê∂") == 4
    //     length("e") == 1,     length("√©") == 1,     length("üê∂") == 1

    const original_enc = te.encode(original)
    return td.decode(original_enc.slice(startindex_utf8, endindex_utf8))
}

console.assert(splice_utf8("e √© üê∂ is a dog", 5, 9, "hannes ‚ù§") === "e √© hannes ‚ù§ is a dog")
console.assert(slice_utf8("e √© üê∂ is a dog", 5, 9) === "üê∂")

// get this by running commit fd78c36f from https://github.com/fonsp/Pluto.jl/pull/3271
// and manually add greek characters, see https://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts
export const sub_charmap = {
    "0": "‚ÇÄ",
    "1": "‚ÇÅ",
    "2": "‚ÇÇ",
    "3": "‚ÇÉ",
    "4": "‚ÇÑ",
    "5": "‚ÇÖ",
    "6": "‚ÇÜ",
    "7": "‚Çá",
    "8": "‚Çà",
    "9": "‚Çâ",
    "x": "‚Çì",
    "k": "‚Çñ",
    "j": "‚±º",
    "v": "·µ•",
    "o": "‚Çí",
    "-": "‚Çã",
    "s": "‚Çõ",
    "n": "‚Çô",
    "=": "‚Çå",
    "p": "‚Çö",
    "i": "·µ¢",
    "u": "·µ§",
    "r": "·µ£",
    "a": "‚Çê",
    "t": "‚Çú",
    ")": "‚Çé",
    "+": "‚Çä",
    "h": "‚Çï",
    "l": "‚Çó",
    "e": "‚Çë",
    "(": "‚Çç",
    "m": "‚Çò",
    // manually added greek characters
    "Œ≤": "·µ¶",
    "Œ≥": "·µß",
    "Œπ": "Õ∫",
    "œÅ": "·µ®",
    "œÜ": "·µ©",
    "œá": "·µ™",
}

// get this by running commit fd78c36f from https://github.com/fonsp/Pluto.jl/pull/3271
// and manually add greek characters, see https://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts
export const sup_charmap = {
    "0": "‚Å∞",
    "1": "¬π",
    "2": "¬≤",
    "3": "¬≥",
    "4": "‚Å¥",
    "5": "‚Åµ",
    "6": "‚Å∂",
    "7": "‚Å∑",
    "8": "‚Å∏",
    "9": "‚Åπ",
    "l": "À°",
    "J": "·¥∂",
    "D": "·¥∞",
    ")": "‚Åæ",
    "W": "·µÇ",
    "m": "·µê",
    "I": "·¥µ",
    "o": "·µí",
    "h": " ∞",
    "e": "·µâ",
    "G": "·¥≥",
    "x": "À£",
    "V": "‚±Ω",
    "b": "·µá",
    "f": "·∂†",
    "g": "·µç",
    "T": "·µÄ",
    "R": "·¥ø",
    "p": "·µñ",
    "(": "‚ÅΩ",
    "M": "·¥π",
    "r": " ≥",
    "B": "·¥Æ",
    "k": "·µè",
    "P": "·¥æ",
    "=": "‚Åº",
    "H": "·¥¥",
    "L": "·¥∏",
    "w": " ∑",
    "+": "‚Å∫",
    "i": "‚Å±",
    "N": "·¥∫",
    "t": "·µó",
    "n": "‚Åø",
    "z": "·∂ª",
    "U": "·µÅ",
    "E": "·¥±",
    "d": "·µà",
    "u": "·µò",
    "j": " ≤",
    "a": "·µÉ",
    "v": "·µõ",
    "A": "·¥¨",
    "y": " ∏",
    "c": "·∂ú",
    "K": "·¥∑",
    "s": "À¢",
    "O": "·¥º",
    "-": "‚Åª",
    "!": "Íúù",
    // manually added greek characters
    "Œ±": "·µÖ",
    "Œ≤": "·µù",
    "Œ≥": "·µû",
    "Œ¥": "·µü",
    "Œµ": "·µã",
    "Œ∏": "·∂ø",
}
